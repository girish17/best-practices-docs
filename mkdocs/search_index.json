{
    "docs": [
        {
            "location": "/",
            "text": "Ethereum Contract Security Techniques and Tips\n\u00b6\n\n\n\n\nThis document is designed to provide a starting \nsecurity\n baseline for intermediate Solidity programmers.  It additionally includes \nsecurity philosophies; bug bounty program guidelines; documentation and procedures; and tools.\n\n\nPull requests are very welcome, from small fixes to sections, and if you've written an article or blog post, please add it to the \nbibliography.\n  See our \nContribution Guidelines\n.\n\n\nAdditional Requested Content\n\u00b6\n\n\nWe especially welcome content in the following areas:\n\n\n\n\nTesting Solidity code (structure, frameworks, common test idioms)\n\n\nSoftware engineering practices for smart contracts and/or blockchain-based programming",
            "title": "Home"
        },
        {
            "location": "/#ethereum-contract-security-techniques-and-tips",
            "text": "This document is designed to provide a starting  security  baseline for intermediate Solidity programmers.  It additionally includes  security philosophies; bug bounty program guidelines; documentation and procedures; and tools.  Pull requests are very welcome, from small fixes to sections, and if you've written an article or blog post, please add it to the  bibliography.   See our  Contribution Guidelines .",
            "title": "Ethereum Contract Security Techniques and Tips"
        },
        {
            "location": "/#additional-requested-content",
            "text": "We especially welcome content in the following areas:   Testing Solidity code (structure, frameworks, common test idioms)  Software engineering practices for smart contracts and/or blockchain-based programming",
            "title": "Additional Requested Content"
        },
        {
            "location": "/general_philosophy/",
            "text": "Ethereum and complex blockchain programs are new and highly experimental. Therefore, you should expect constant changes in the security landscape, as new bugs and security risks are discovered, and new best practices are developed. Following the security practices in this document is therefore only the beginning of the security work you will need to do as a smart contract developer.\n\n\nSmart contract programming requires a different engineering mindset than you may be used to. The cost of failure can be high, and change can be difficult, making it in some ways more similar to hardware programming or financial services programming than web or mobile development. It is therefore not enough to defend against known vulnerabilities. Instead, you will need to learn a new philosophy of development:\n\n\n\n\nPrepare for failure\n. Any non-trivial contract will have errors in it. Your code must, therefore, be able to respond to bugs and vulnerabilities gracefully.\n\n\nPause the contract when things are going wrong ('circuit breaker')\n\n\nManage the amount of money at risk (rate limiting, maximum usage)\n\n\n\n\nHave an effective upgrade path for bugfixes and improvements\n\n\n\n\n\n\nRollout carefully\n.\n It is always better to catch bugs before a full production release.\n\n\n\n\nTest contracts thoroughly, and add tests whenever new attack vectors are discovered\n\n\nProvide \nbug bounties\n starting from alpha testnet releases\n\n\n\n\nRollout in phases, with increasing usage and testing in each phase\n\n\n\n\n\n\nKeep contracts simple\n. Complexity increases the likelihood of errors.\n\n\n\n\nEnsure the contract logic is simple\n\n\nModularize code to keep contracts and functions small\n\n\nUse already-written tools or code where possible (eg. don't roll your own random number generator)\n\n\nPrefer clarity to performance whenever possible\n\n\n\n\nOnly use the blockchain for the parts of your system that require decentralization\n\n\n\n\n\n\nStay up to date\n. Use the resources listed in the next section to keep track of new security developments.\n\n\n\n\nCheck your contracts for any new bug that's discovered\n\n\nUpgrade to the latest version of any tool or library as soon as possible\n\n\n\n\nAdopt new security techniques that appear useful\n\n\n\n\n\n\nBe aware of blockchain properties\n. While much of your programming experience will be relevant to Ethereum programming, there are some pitfalls to be aware of.\n\n\n\n\nBe extremely careful about external contract calls, which may execute malicious code and change control flow.\n\n\nUnderstand that your public functions are public, and may be called maliciously. Your private data is also viewable by anyone.\n\n\nKeep gas costs and the block gas limit in mind.\n\n\n\n\nFundamental Tradeoffs: Simplicity versus Complexity cases\n\u00b6\n\n\n\n\nThere are multiple fundamental tradeoffs to consider when assessing the structure and security of a smart contract system.  The general recommendation for any smart contract system is to identify the proper balance for these fundamental tradeoffs.\n\n\nAn ideal smart contract system from a software engineering bias is modular, reuses code instead of duplicating it, and supports upgradeable components.  An ideal smart contract system from a secure architecture bias may share this mindset, especially in the case of more complex smart contract systems.\n\n\nHowever, there are important exceptions where security and software engineering best practices may not be aligned.  In each case, the proper balance is obtained by identifying the optimal mix of properties along contract system dimensions such as:\n\n\n\n\nRigid versus Upgradeable\n\n\nMonolithic versus Modular\n\n\nDuplication versus Reuse\n\n\n\n\nRigid versus Upgradeable\n\u00b6\n\n\nWhile multiple resources, including this one, emphasize malleability characteristics such as Killable, Upgradeable or Modifiable patterns there is a \nfundamental tradeoff\n between malleability and security.\n\n\nMalleability patterns by definition add complexity and potential attack surfaces.  Simplicity is particularly effective over complexity in cases where the smart contract system performs a very limited set of functionality for a pre-defined limited period of time, for example, a governance-free finite-time-frame token-sale contract system.\n\n\nMonolithic versus Modular\n\u00b6\n\n\nA monolithic self-contained contract keeps all knowledge locally identifiable and readable.  While there are few smart contract systems held in high regard that exist as monoliths, there is an argument to be made for extreme locality of data and flow - for example, in the case of optimizing code review efficiency.\n\n\nAs with the other tradeoffs considered here, security best practices trend away from software engineering best practices in simple short-lived contracts and trend toward software engineering best practices in the case of more complex perpetual contract systems.\n\n\nDuplication versus Reuse\n\u00b6\n\n\nA smart contract system from a software engineering perspective wishes to maximize reuse where reasonable.  There are many ways to reuse contract code in Solidity.  Using proven previously-deployed contracts \nwhich you own\n is generally the safest manner to achieve code reuse.\n\n\nDuplication is frequently relied upon in cases where self-owned previously-deployed contracts are not available.  Efforts such as \nLive Libs\n and \nZeppelin Solidity\n seek to provide patterns such that secure code can be re-used without duplication.  Any contract security analyses must include any re-used code that has not previously established a level of trust commensurate with the funds at risk in the target smart contract system.",
            "title": "General Philosophy"
        },
        {
            "location": "/general_philosophy/#fundamental-tradeoffs-simplicity-versus-complexity-cases",
            "text": "There are multiple fundamental tradeoffs to consider when assessing the structure and security of a smart contract system.  The general recommendation for any smart contract system is to identify the proper balance for these fundamental tradeoffs.  An ideal smart contract system from a software engineering bias is modular, reuses code instead of duplicating it, and supports upgradeable components.  An ideal smart contract system from a secure architecture bias may share this mindset, especially in the case of more complex smart contract systems.  However, there are important exceptions where security and software engineering best practices may not be aligned.  In each case, the proper balance is obtained by identifying the optimal mix of properties along contract system dimensions such as:   Rigid versus Upgradeable  Monolithic versus Modular  Duplication versus Reuse",
            "title": "Fundamental Tradeoffs: Simplicity versus Complexity cases"
        },
        {
            "location": "/general_philosophy/#rigid-versus-upgradeable",
            "text": "While multiple resources, including this one, emphasize malleability characteristics such as Killable, Upgradeable or Modifiable patterns there is a  fundamental tradeoff  between malleability and security.  Malleability patterns by definition add complexity and potential attack surfaces.  Simplicity is particularly effective over complexity in cases where the smart contract system performs a very limited set of functionality for a pre-defined limited period of time, for example, a governance-free finite-time-frame token-sale contract system.",
            "title": "Rigid versus Upgradeable"
        },
        {
            "location": "/general_philosophy/#monolithic-versus-modular",
            "text": "A monolithic self-contained contract keeps all knowledge locally identifiable and readable.  While there are few smart contract systems held in high regard that exist as monoliths, there is an argument to be made for extreme locality of data and flow - for example, in the case of optimizing code review efficiency.  As with the other tradeoffs considered here, security best practices trend away from software engineering best practices in simple short-lived contracts and trend toward software engineering best practices in the case of more complex perpetual contract systems.",
            "title": "Monolithic versus Modular"
        },
        {
            "location": "/general_philosophy/#duplication-versus-reuse",
            "text": "A smart contract system from a software engineering perspective wishes to maximize reuse where reasonable.  There are many ways to reuse contract code in Solidity.  Using proven previously-deployed contracts  which you own  is generally the safest manner to achieve code reuse.  Duplication is frequently relied upon in cases where self-owned previously-deployed contracts are not available.  Efforts such as  Live Libs  and  Zeppelin Solidity  seek to provide patterns such that secure code can be re-used without duplication.  Any contract security analyses must include any re-used code that has not previously established a level of trust commensurate with the funds at risk in the target smart contract system.",
            "title": "Duplication versus Reuse"
        },
        {
            "location": "/security_notifications/",
            "text": "This is a list of resources that will often highlight discovered exploits in Ethereum or Solidity. The official source of security notifications is the Ethereum Blog, but in many cases, vulnerabilities will be disclosed and discussed earlier in other locations.\n\n\n\n\nEthereum Blog\n: The official Ethereum blog\n\n\nEthereum Blog - Security only\n: All blog posts that are tagged \nSecurity\n\n\nEthereum Gitter\n chat rooms\n\n\nSolidity\n\n\nGo-Ethereum\n\n\nCPP-Ethereum\n\n\nResearch\n\n\nReddit\n\n\nNetwork Stats\n\n\n\n\nIt's highly recommended that you \nregularly\n read all these sources, as exploits they note may impact your contracts.\n\n\nAdditionally, here is a list of Ethereum core developers who may write about security, and see the \nbibliography\n for more from the community.\n\n\n\n\nVitalik Buterin\n: \nTwitter\n, \nGithub\n, \nReddit\n, \nEthereum Blog\n\n\nDr. Christian Reitwiessner\n: \nTwitter\n, \nGithub\n, \nEthereum Blog\n\n\nDr. Gavin Wood\n: \nTwitter\n, \nBlog\n, \nGithub\n\n\nVlad Zamfir\n: \nTwitter\n, \nGithub\n, \nEthereum Blog\n\n\n\n\nBeyond following core developers, it is critical to participate in the wider blockchain-related security community - as security disclosures or observations will come through a variety of parties.",
            "title": "Security Notifications"
        },
        {
            "location": "/recommendations/",
            "text": "External Calls\n\u00b6\n\n\nAvoid external calls when possible\n\u00b6\n\n\nCalls to untrusted contracts can introduce several unexpected risks or errors. External calls may execute malicious code in that contract \nor\n any other contract that it depends upon. As such, every external call should be treated as a potential security risk and removed if possible. When it is not possible to remove external calls, use the recommendations in the rest of this section to minimize the danger.\n\n\nBe aware of the tradeoffs between \nsend()\n, \ntransfer()\n, and \ncall.value()()\n\u00b6\n\n\nWhen sending Ether be aware of the relative tradeoffs between the use of\n\nsomeAddress.send()\n, \nsomeAddress.transfer()\n, and \nsomeAddress.call.value()()\n.\n\n\n\n\nx.transfer(y)\n is equivalent to \nrequire(x.send(y));\n Send is the low level counterpart of transfer, and it's advisable to use transfer when possible.\n\n\nsomeAddress.send()\nand \nsomeAddress.transfer()\n are considered \nsafe\n against \nreentrancy\n.\n    While these methods still trigger code execution, the called contract is\n    only given a stipend of 2,300 gas which is currently only enough to log an\n    event.\n\n\nsomeAddress.call.value()()\n will send the provided ether and trigger code\n    execution.  The executed code is given all available gas for execution\n    making this type of value transfer \nunsafe\n against reentrancy.\n\n\n\n\nUsing \nsend()\n or \ntransfer()\n will prevent reentrancy but it does so at the cost of being\nincompatible with any contract whose fallback function requires more than 2,300\ngas.\n\n\nOne pattern that attempts to balance this trade-off is to implement both\na \npush\n and \npull\n mechanism, using \nsend()\n or \ntransfer()\n\nfor the \npush\n component and \ncall.value()()\n for the \npull\n component.\n\n\nIt is worth pointing out that exclusive use of \nsend()\n or \ntransfer()\n for value transfers\ndoes not itself make a contract safe against reentrancy but only makes those\nspecific value transfers safe against reentrancy.\n\n\nHandle errors in external calls\n\u00b6\n\n\nSolidity offers low-level call methods that work on raw addresses: \naddress.call()\n, \naddress.callcode()\n, \naddress.delegatecall()\n, and \naddress.send\n. These low-level methods never throw an exception, but will return \nfalse\n if the call encounters an exception. On the other hand, \ncontract calls\n (e.g., \nExternalContract.doSomething()\n) will automatically propagate a throw (for example, \nExternalContract.doSomething()\n will also \nthrow\n if \ndoSomething()\n throws).\n\n\nIf you choose to use the low-level call methods, make sure to handle the possibility that the call will fail, by checking the return value.\n\n\n// bad\nsomeAddress.send(55);\nsomeAddress.call.value(55)(); // this is doubly dangerous, as it will forward all remaining gas and doesn't check for result\nsomeAddress.call.value(100)(bytes4(sha3(\"deposit()\"))); // if deposit throws an exception, the raw call() will only return false and transaction will NOT be reverted\n\n// good\nif(!someAddress.send(55)) {\n    // Some failure code\n}\n\nExternalContract(someAddress).deposit.value(100);\n\n\n\n\nDon't make control flow assumptions after external calls\n\u00b6\n\n\nWhether using \nraw calls\n or \ncontract calls\n, assume that malicious code will execute if \nExternalContract\n is untrusted. Even if \nExternalContract\n is not malicious, malicious code can be executed by any contracts \nit\n calls. One particular danger is malicious code may hijack the control flow, leading to race conditions. (See \nRace Conditions\n for a fuller discussion of this problem).\n\n\nFavor \npull\n over \npush\n for external calls\n\u00b6\n\n\nExternal calls can fail accidentally or deliberately. To minimize the damage caused by such failures, it is often better to isolate each external call into its own transaction that can be initiated by the recipient of the call. This is especially relevant for payments, where it is better to let users withdraw funds rather than push funds to them automatically. (This also reduces the chance of \nproblems with the gas limit\n.)  Avoid combining multiple \nsend()\n calls in a single transaction.\n\n\n// bad\ncontract auction {\n    address highestBidder;\n    uint highestBid;\n\n    function bid() payable {\n        require(msg.value >= highestBid);\n\n        if (highestBidder != 0) {\n            require(highestBidder.send(highestBid)) // if this call consistently fails, no one else can bid\n        }\n\n       highestBidder = msg.sender;\n       highestBid = msg.value;\n    }\n}\n\n// good\ncontract auction {\n    address highestBidder;\n    uint highestBid;\n    mapping(address => uint) refunds;\n\n    function bid() payable external {\n        require(msg.value >= highestBid);\n\n        if (highestBidder != 0) {\n            refunds[highestBidder] += highestBid; // record the refund that this user can claim\n        }\n\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n    }\n\n    function withdrawRefund() external {\n        uint refund = refunds[msg.sender];\n        refunds[msg.sender] = 0;\n        require(msg.sender.send(refund)); // revert state if send fails\n        }\n    }\n}\n\n\n\n\nMark untrusted contracts\n\u00b6\n\n\nWhen interacting with external contracts, name your variables, methods, and contract interfaces in a way that makes it clear that interacting with them is potentially unsafe. This applies to your own functions that call external contracts.\n\n\n// bad\nBank.withdraw(100); // Unclear whether trusted or untrusted\n\nfunction makeWithdrawal(uint amount) { // Isn't clear that this function is potentially unsafe\n    Bank.withdraw(amount);\n}\n\n// good\nUntrustedBank.withdraw(100); // untrusted external call\nTrustedBank.withdraw(100); // external but trusted bank contract maintained by XYZ Corp\n\nfunction makeUntrustedWithdrawal(uint amount) {\n    UntrustedBank.withdraw(amount);\n}\n\n\n\n\nEnforce invariants with \nassert()\n\u00b6\n\n\nAn assert guard triggers when an assertion fails - such as an invariant property changing. For example, the token to ether issuance ratio, in a token issuance contract, may be fixed. You can verify that this is the case at all times with an \nassert()\n. Assert guards should often be combined with other techniques, such as pausing the contract and allowing upgrades. (Otherwise, you may end up stuck, with an assertion that is always failing.)\n\n\nExample:\n\n\ncontract Token {\n    mapping(address => uint) public balanceOf;\n    uint public totalSupply;\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        totalSupply += msg.value;\n        assert(this.balance >= totalSupply);\n    }\n}\n\n\n\n\nNote that the assertion is \nnot\n a strict equality of the balance because the contract can be \nforcibly sent ether\n without going through the \ndeposit()\n function!\n\n\nUse \nassert()\n and \nrequire()\n properly\n\u00b6\n\n\nIn Solidity 0.4.10 \nassert()\n and \nrequire()\n were introduced. \nrequire(condition)\n is meant to be used for input validation, which should be done on any user input, and reverts if the condition is false. \nassert(condition)\n also reverts if the condition is false but should be used only for invariants: internal errors or to check if your contract has reached an invalid state. Following this paradigm allows formal analysis tools to verify that the invalid opcode can never be reached: meaning no invariants in the code are violated and that the code is formally verified.\n\n\nBeware rounding with integer division\n\u00b6\n\n\nAll integer division rounds down to the nearest integer. If you need more precision, consider using a multiplier, or store both the numerator and denominator.\n\n\n(In the future, Solidity will have a fixed-point type, which will make this easier.)\n\n\n// bad\nuint x = 5 / 2; // Result is 2, all integer divison rounds DOWN to the nearest integer\n\n// good\nuint multiplier = 10;\nuint x = (5 * multiplier) / 2;\n\nuint numerator = 5;\nuint denominator = 2;\n\n\n\n\nRemember that Ether can be forcibly sent to an account\n\u00b6\n\n\nBeware of coding an invariant that strictly checks the balance of a contract.\n\n\nAn attacker can forcibly send wei to any account and this cannot be prevented (not even with a fallback function that does a \nrevert()\n).\n\n\nThe attacker can do this by creating a contract, funding it with 1 wei, and invoking\n\nselfdestruct(victimAddress)\n.  No code is invoked in \nvictimAddress\n, so it\ncannot be prevented.\n\n\nDon't assume contracts are created with zero balance\n\u00b6\n\n\nAn attacker can send wei to the address of a contract before it is created.  Contracts should not assume that its initial state contains a zero balance.  See \nissue 61\n for more details.\n\n\nRemember that on-chain data is public\n\u00b6\n\n\nMany applications require submitted data to be private up until some point in time in order to work. Games (eg. on-chain rock-paper-scissors) and auction mechanisms (eg. sealed-bid second-price auctions) are two major categories of examples. If you are building an application where privacy is an issue, take care to avoid requiring users to publish information too early.\n\n\nExamples:\n\n\n\n\nIn rock paper scissors, require both players to submit a hash of their intended move first, then require both players to submit their move; if the submitted move does not match the hash throw it out.\n\n\nIn an auction, require players to submit a hash of their bid value in an initial phase (along with a deposit greater than their bid value), and then submit their action bid value in the second phase.\n\n\nWhen developing an application that depends on a random number generator, the order should always be (1) players submit moves, (2) random number generated, (3) players paid out. The method by which random numbers are generated is itself an area of active research; current best-in-class solutions include Bitcoin block headers (verified through \nhttp://btcrelay.org\n), hash-commit-reveal schemes (ie. one party generates a number, publishes its hash to \"commit\" to the value, and then reveals the value later) and \nRANDAO\n.\n\n\nIf you are implementing a frequent batch auction, a hash-commit scheme is also desirable.\n\n\n\n\nBe aware of the tradeoffs between abstract contracts and interfaces\n\u00b6\n\n\nBoth interfaces and abstract contracts provide one with a customizable and re-usable approach for smart contracts. Interfaces, which were introduced in Solidity 0.4.11, are similar to abstract contracts but cannot have any functions implemented. Interfaces also have limitations such as not being able to access storage or inherit from other interfaces which generally makes abstract contracts more practical. Although, Interfaces are certainly useful for designing contracts prior to implementation. Additionally, it is important to keep in mind that if a contract inherits from an abstract contract it must implement all non-implemented functions via overriding or it will be abstract as well.\n\n\nIn 2-party or N-party contracts, beware of the possibility that some participants may \"drop offline\" and not return\n\u00b6\n\n\nDo not make refund or claim processes dependent on a specific party performing a particular action with no other way of getting the funds out. For example, in a rock-paper-scissors game, one common mistake is to not make a payout until both players submit their moves; however, a malicious player can \"grief\" the other by simply never submitting their move - in fact, if a player sees the other player's revealed move and determines that they lost, they have no reason to submit their own move at all. This issue may also arise in the context of state channel settlement. When such situations are an issue, (1) provide a way of circumventing non-participating participants, perhaps through a time limit, and (2) consider adding an additional economic incentive for participants to submit information in all of the situations in which they are supposed to do so.\n\n\nKeep fallback functions simple\n\u00b6\n\n\nFallback functions\n are called when a contract is sent a message with no arguments (or when no function matches), and only has access to 2,300 gas when called from a \n.send()\n or \n.transfer()\n. If you wish to be able to receive Ether from a \n.send()\n or \n.transfer()\n, the most you can do in a fallback function is log an event. Use a proper function if a computation or more gas is required.\n\n\n// bad\nfunction() payable { balances[msg.sender] += msg.value; }\n\n// good\nfunction deposit() payable external { balances[msg.sender] += msg.value; }\n\nfunction() payable { LogDepositReceived(msg.sender); }\n\n\n\n\nExplicitly mark visibility in functions and state variables\n\u00b6\n\n\nExplicitly label the visibility of functions and state variables. Functions can be specified as being \nexternal\n, \npublic\n, \ninternal\n or \nprivate\n. Please understand the differences between them, for example, \nexternal\n may be sufficient instead of \npublic\n. For state variables, \nexternal\n is not possible. Labeling the visibility explicitly will make it easier to catch incorrect assumptions about who can call the function or access the variable.\n\n\n// bad\nuint x; // the default is private for state variables, but it should be made explicit\nfunction buy() { // the default is public\n    // public code\n}\n\n// good\nuint private y;\nfunction buy() external {\n    // only callable externally\n}\n\nfunction utility() public {\n    // callable externally, as well as internally: changing this code requires thinking about both cases.\n}\n\nfunction internalAction() internal {\n    // internal code\n}\n\n\n\n\nLock pragmas to specific compiler version\n\u00b6\n\n\nContracts should be deployed with the same compiler version and flags that they have been tested the most with. Locking the pragma helps ensure that contracts do not accidentally get deployed using, for example, the latest compiler which may have higher risks of undiscovered bugs. Contracts may also be deployed by others and the pragma indicates the compiler version intended by the original authors.\n\n\n// bad\npragma solidity ^0.4.4;\n\n\n// good\npragma solidity 0.4.4;\n\n\n\n\nBeware division by zero (Solidity < 0.4)\n\u00b6\n\n\nPrior to version 0.4, Solidity \nreturns zero\n and does not \nthrow\n an exception when a number is divided by zero. Ensure you're running at least version 0.4.\n\n\nDifferentiate functions and events\n\u00b6\n\n\nFavor capitalization and a prefix in front of events (we suggest \nLog\n), to prevent the risk of confusion between functions and events. For functions, always start with a lowercase letter, except for the constructor.\n\n\n// bad\nevent Transfer() {}\nfunction transfer() {}\n\n// good\nevent LogTransfer() {}\nfunction transfer() external {}\n\n\n\n\nPrefer newer Solidity constructs\n\u00b6\n\n\nPrefer constructs/aliases such as \nselfdestruct\n (over \nsuicide\n) and \nkeccak256\n (over \nsha3\n).  Patterns like \nrequire(msg.sender.send(1 ether))\n can also be simplified to using \ntransfer()\n, as in \nmsg.sender.transfer(1 ether)\n.",
            "title": "Recommendations for Smart Contract Security in Solidity"
        },
        {
            "location": "/recommendations/#external-calls",
            "text": "",
            "title": "External Calls"
        },
        {
            "location": "/recommendations/#avoid-external-calls-when-possible",
            "text": "Calls to untrusted contracts can introduce several unexpected risks or errors. External calls may execute malicious code in that contract  or  any other contract that it depends upon. As such, every external call should be treated as a potential security risk and removed if possible. When it is not possible to remove external calls, use the recommendations in the rest of this section to minimize the danger.",
            "title": "Avoid external calls when possible"
        },
        {
            "location": "/recommendations/#be-aware-of-the-tradeoffs-between-send-transfer-and-callvalue",
            "text": "When sending Ether be aware of the relative tradeoffs between the use of someAddress.send() ,  someAddress.transfer() , and  someAddress.call.value()() .   x.transfer(y)  is equivalent to  require(x.send(y));  Send is the low level counterpart of transfer, and it's advisable to use transfer when possible.  someAddress.send() and  someAddress.transfer()  are considered  safe  against  reentrancy .\n    While these methods still trigger code execution, the called contract is\n    only given a stipend of 2,300 gas which is currently only enough to log an\n    event.  someAddress.call.value()()  will send the provided ether and trigger code\n    execution.  The executed code is given all available gas for execution\n    making this type of value transfer  unsafe  against reentrancy.   Using  send()  or  transfer()  will prevent reentrancy but it does so at the cost of being\nincompatible with any contract whose fallback function requires more than 2,300\ngas.  One pattern that attempts to balance this trade-off is to implement both\na  push  and  pull  mechanism, using  send()  or  transfer() \nfor the  push  component and  call.value()()  for the  pull  component.  It is worth pointing out that exclusive use of  send()  or  transfer()  for value transfers\ndoes not itself make a contract safe against reentrancy but only makes those\nspecific value transfers safe against reentrancy.",
            "title": "Be aware of the tradeoffs between send(), transfer(), and call.value()()"
        },
        {
            "location": "/recommendations/#handle-errors-in-external-calls",
            "text": "Solidity offers low-level call methods that work on raw addresses:  address.call() ,  address.callcode() ,  address.delegatecall() , and  address.send . These low-level methods never throw an exception, but will return  false  if the call encounters an exception. On the other hand,  contract calls  (e.g.,  ExternalContract.doSomething() ) will automatically propagate a throw (for example,  ExternalContract.doSomething()  will also  throw  if  doSomething()  throws).  If you choose to use the low-level call methods, make sure to handle the possibility that the call will fail, by checking the return value.  // bad\nsomeAddress.send(55);\nsomeAddress.call.value(55)(); // this is doubly dangerous, as it will forward all remaining gas and doesn't check for result\nsomeAddress.call.value(100)(bytes4(sha3(\"deposit()\"))); // if deposit throws an exception, the raw call() will only return false and transaction will NOT be reverted\n\n// good\nif(!someAddress.send(55)) {\n    // Some failure code\n}\n\nExternalContract(someAddress).deposit.value(100);",
            "title": "Handle errors in external calls"
        },
        {
            "location": "/recommendations/#dont-make-control-flow-assumptions-after-external-calls",
            "text": "Whether using  raw calls  or  contract calls , assume that malicious code will execute if  ExternalContract  is untrusted. Even if  ExternalContract  is not malicious, malicious code can be executed by any contracts  it  calls. One particular danger is malicious code may hijack the control flow, leading to race conditions. (See  Race Conditions  for a fuller discussion of this problem).",
            "title": "Don't make control flow assumptions after external calls"
        },
        {
            "location": "/recommendations/#favor-pull-over-push-for-external-calls",
            "text": "External calls can fail accidentally or deliberately. To minimize the damage caused by such failures, it is often better to isolate each external call into its own transaction that can be initiated by the recipient of the call. This is especially relevant for payments, where it is better to let users withdraw funds rather than push funds to them automatically. (This also reduces the chance of  problems with the gas limit .)  Avoid combining multiple  send()  calls in a single transaction.  // bad\ncontract auction {\n    address highestBidder;\n    uint highestBid;\n\n    function bid() payable {\n        require(msg.value >= highestBid);\n\n        if (highestBidder != 0) {\n            require(highestBidder.send(highestBid)) // if this call consistently fails, no one else can bid\n        }\n\n       highestBidder = msg.sender;\n       highestBid = msg.value;\n    }\n}\n\n// good\ncontract auction {\n    address highestBidder;\n    uint highestBid;\n    mapping(address => uint) refunds;\n\n    function bid() payable external {\n        require(msg.value >= highestBid);\n\n        if (highestBidder != 0) {\n            refunds[highestBidder] += highestBid; // record the refund that this user can claim\n        }\n\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n    }\n\n    function withdrawRefund() external {\n        uint refund = refunds[msg.sender];\n        refunds[msg.sender] = 0;\n        require(msg.sender.send(refund)); // revert state if send fails\n        }\n    }\n}",
            "title": "Favor pull over push for external calls"
        },
        {
            "location": "/recommendations/#mark-untrusted-contracts",
            "text": "When interacting with external contracts, name your variables, methods, and contract interfaces in a way that makes it clear that interacting with them is potentially unsafe. This applies to your own functions that call external contracts.  // bad\nBank.withdraw(100); // Unclear whether trusted or untrusted\n\nfunction makeWithdrawal(uint amount) { // Isn't clear that this function is potentially unsafe\n    Bank.withdraw(amount);\n}\n\n// good\nUntrustedBank.withdraw(100); // untrusted external call\nTrustedBank.withdraw(100); // external but trusted bank contract maintained by XYZ Corp\n\nfunction makeUntrustedWithdrawal(uint amount) {\n    UntrustedBank.withdraw(amount);\n}",
            "title": "Mark untrusted contracts"
        },
        {
            "location": "/recommendations/#enforce-invariants-with-assert",
            "text": "An assert guard triggers when an assertion fails - such as an invariant property changing. For example, the token to ether issuance ratio, in a token issuance contract, may be fixed. You can verify that this is the case at all times with an  assert() . Assert guards should often be combined with other techniques, such as pausing the contract and allowing upgrades. (Otherwise, you may end up stuck, with an assertion that is always failing.)  Example:  contract Token {\n    mapping(address => uint) public balanceOf;\n    uint public totalSupply;\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        totalSupply += msg.value;\n        assert(this.balance >= totalSupply);\n    }\n}  Note that the assertion is  not  a strict equality of the balance because the contract can be  forcibly sent ether  without going through the  deposit()  function!",
            "title": "Enforce invariants with assert()"
        },
        {
            "location": "/recommendations/#use-assert-and-require-properly",
            "text": "In Solidity 0.4.10  assert()  and  require()  were introduced.  require(condition)  is meant to be used for input validation, which should be done on any user input, and reverts if the condition is false.  assert(condition)  also reverts if the condition is false but should be used only for invariants: internal errors or to check if your contract has reached an invalid state. Following this paradigm allows formal analysis tools to verify that the invalid opcode can never be reached: meaning no invariants in the code are violated and that the code is formally verified.",
            "title": "Use assert() and require() properly"
        },
        {
            "location": "/recommendations/#beware-rounding-with-integer-division",
            "text": "All integer division rounds down to the nearest integer. If you need more precision, consider using a multiplier, or store both the numerator and denominator.  (In the future, Solidity will have a fixed-point type, which will make this easier.)  // bad\nuint x = 5 / 2; // Result is 2, all integer divison rounds DOWN to the nearest integer\n\n// good\nuint multiplier = 10;\nuint x = (5 * multiplier) / 2;\n\nuint numerator = 5;\nuint denominator = 2;",
            "title": "Beware rounding with integer division"
        },
        {
            "location": "/recommendations/#remember-that-ether-can-be-forcibly-sent-to-an-account",
            "text": "Beware of coding an invariant that strictly checks the balance of a contract.  An attacker can forcibly send wei to any account and this cannot be prevented (not even with a fallback function that does a  revert() ).  The attacker can do this by creating a contract, funding it with 1 wei, and invoking selfdestruct(victimAddress) .  No code is invoked in  victimAddress , so it\ncannot be prevented.",
            "title": "Remember that Ether can be forcibly sent to an account"
        },
        {
            "location": "/recommendations/#dont-assume-contracts-are-created-with-zero-balance",
            "text": "An attacker can send wei to the address of a contract before it is created.  Contracts should not assume that its initial state contains a zero balance.  See  issue 61  for more details.",
            "title": "Don't assume contracts are created with zero balance"
        },
        {
            "location": "/recommendations/#remember-that-on-chain-data-is-public",
            "text": "Many applications require submitted data to be private up until some point in time in order to work. Games (eg. on-chain rock-paper-scissors) and auction mechanisms (eg. sealed-bid second-price auctions) are two major categories of examples. If you are building an application where privacy is an issue, take care to avoid requiring users to publish information too early.  Examples:   In rock paper scissors, require both players to submit a hash of their intended move first, then require both players to submit their move; if the submitted move does not match the hash throw it out.  In an auction, require players to submit a hash of their bid value in an initial phase (along with a deposit greater than their bid value), and then submit their action bid value in the second phase.  When developing an application that depends on a random number generator, the order should always be (1) players submit moves, (2) random number generated, (3) players paid out. The method by which random numbers are generated is itself an area of active research; current best-in-class solutions include Bitcoin block headers (verified through  http://btcrelay.org ), hash-commit-reveal schemes (ie. one party generates a number, publishes its hash to \"commit\" to the value, and then reveals the value later) and  RANDAO .  If you are implementing a frequent batch auction, a hash-commit scheme is also desirable.",
            "title": "Remember that on-chain data is public"
        },
        {
            "location": "/recommendations/#be-aware-of-the-tradeoffs-between-abstract-contracts-and-interfaces",
            "text": "Both interfaces and abstract contracts provide one with a customizable and re-usable approach for smart contracts. Interfaces, which were introduced in Solidity 0.4.11, are similar to abstract contracts but cannot have any functions implemented. Interfaces also have limitations such as not being able to access storage or inherit from other interfaces which generally makes abstract contracts more practical. Although, Interfaces are certainly useful for designing contracts prior to implementation. Additionally, it is important to keep in mind that if a contract inherits from an abstract contract it must implement all non-implemented functions via overriding or it will be abstract as well.",
            "title": "Be aware of the tradeoffs between abstract contracts and interfaces"
        },
        {
            "location": "/recommendations/#in-2-party-or-n-party-contracts-beware-of-the-possibility-that-some-participants-may-drop-offline-and-not-return",
            "text": "Do not make refund or claim processes dependent on a specific party performing a particular action with no other way of getting the funds out. For example, in a rock-paper-scissors game, one common mistake is to not make a payout until both players submit their moves; however, a malicious player can \"grief\" the other by simply never submitting their move - in fact, if a player sees the other player's revealed move and determines that they lost, they have no reason to submit their own move at all. This issue may also arise in the context of state channel settlement. When such situations are an issue, (1) provide a way of circumventing non-participating participants, perhaps through a time limit, and (2) consider adding an additional economic incentive for participants to submit information in all of the situations in which they are supposed to do so.",
            "title": "In 2-party or N-party contracts, beware of the possibility that some participants may \"drop offline\" and not return"
        },
        {
            "location": "/recommendations/#keep-fallback-functions-simple",
            "text": "Fallback functions  are called when a contract is sent a message with no arguments (or when no function matches), and only has access to 2,300 gas when called from a  .send()  or  .transfer() . If you wish to be able to receive Ether from a  .send()  or  .transfer() , the most you can do in a fallback function is log an event. Use a proper function if a computation or more gas is required.  // bad\nfunction() payable { balances[msg.sender] += msg.value; }\n\n// good\nfunction deposit() payable external { balances[msg.sender] += msg.value; }\n\nfunction() payable { LogDepositReceived(msg.sender); }",
            "title": "Keep fallback functions simple"
        },
        {
            "location": "/recommendations/#explicitly-mark-visibility-in-functions-and-state-variables",
            "text": "Explicitly label the visibility of functions and state variables. Functions can be specified as being  external ,  public ,  internal  or  private . Please understand the differences between them, for example,  external  may be sufficient instead of  public . For state variables,  external  is not possible. Labeling the visibility explicitly will make it easier to catch incorrect assumptions about who can call the function or access the variable.  // bad\nuint x; // the default is private for state variables, but it should be made explicit\nfunction buy() { // the default is public\n    // public code\n}\n\n// good\nuint private y;\nfunction buy() external {\n    // only callable externally\n}\n\nfunction utility() public {\n    // callable externally, as well as internally: changing this code requires thinking about both cases.\n}\n\nfunction internalAction() internal {\n    // internal code\n}",
            "title": "Explicitly mark visibility in functions and state variables"
        },
        {
            "location": "/recommendations/#lock-pragmas-to-specific-compiler-version",
            "text": "Contracts should be deployed with the same compiler version and flags that they have been tested the most with. Locking the pragma helps ensure that contracts do not accidentally get deployed using, for example, the latest compiler which may have higher risks of undiscovered bugs. Contracts may also be deployed by others and the pragma indicates the compiler version intended by the original authors.  // bad\npragma solidity ^0.4.4;\n\n\n// good\npragma solidity 0.4.4;",
            "title": "Lock pragmas to specific compiler version"
        },
        {
            "location": "/recommendations/#beware-division-by-zero-solidity-04",
            "text": "Prior to version 0.4, Solidity  returns zero  and does not  throw  an exception when a number is divided by zero. Ensure you're running at least version 0.4.",
            "title": "Beware division by zero (Solidity &lt; 0.4)"
        },
        {
            "location": "/recommendations/#differentiate-functions-and-events",
            "text": "Favor capitalization and a prefix in front of events (we suggest  Log ), to prevent the risk of confusion between functions and events. For functions, always start with a lowercase letter, except for the constructor.  // bad\nevent Transfer() {}\nfunction transfer() {}\n\n// good\nevent LogTransfer() {}\nfunction transfer() external {}",
            "title": "Differentiate functions and events"
        },
        {
            "location": "/recommendations/#prefer-newer-solidity-constructs",
            "text": "Prefer constructs/aliases such as  selfdestruct  (over  suicide ) and  keccak256  (over  sha3 ).  Patterns like  require(msg.sender.send(1 ether))  can also be simplified to using  transfer() , as in  msg.sender.transfer(1 ether) .",
            "title": "Prefer newer Solidity constructs"
        },
        {
            "location": "/known_attacks/",
            "text": "Race Conditions\n\u00b6\n\n\nOne of the major dangers of calling external contracts is that they can take over the control flow, and make changes to your data that the calling function wasn't expecting. This class of bug can take many forms, and both of the major bugs that led to the DAO's collapse were bugs of this sort.\n\n\nReentrancy\n\u00b6\n\n\nThe first version of this bug to be noticed involved functions that could be called repeatedly, before the first invocation of the function was finished. This may cause the different invocations of the function to interact in destructive ways.\n\n\n// INSECURE\nmapping (address => uint) private userBalances;\n\nfunction withdrawBalance() public {\n    uint amountToWithdraw = userBalances[msg.sender];\n    require(msg.sender.call.value(amountToWithdraw)()); // At this point, the caller's code is executed, and can call withdrawBalance again\n    userBalances[msg.sender] = 0;\n}\n\n\n\n\nSince the user's balance is not set to 0 until the very end of the function, the second (and later) invocations will still succeed, and will withdraw the balance over and over again. A very similar bug was one of the vulnerabilities in the DAO attack.\n\n\nIn the example given, the best way to avoid the problem is to \nuse \nsend()\n instead of \ncall.value()()\n. This will prevent any external code from being executed.\n\n\nHowever, if you can't remove the external call, the next simplest way to prevent this attack is to make sure you don't call an external function until you've done all the internal work you need to do:\n\n\nmapping (address => uint) private userBalances;\n\nfunction withdrawBalance() public {\n    uint amountToWithdraw = userBalances[msg.sender];\n    userBalances[msg.sender] = 0;\n    require(msg.sender.call.value(amountToWithdraw)()); // The user's balance is already 0, so future invocations won't withdraw anything\n}\n\n\n\n\nNote that if you had another function which called \nwithdrawBalance()\n, it would be potentially subject to the same attack, so you must treat any function which calls an untrusted contract as itself untrusted. See below for further discussion of potential solutions.\n\n\nCross-function Race Conditions\n\u00b6\n\n\nAn attacker may also be able to do a similar attack using two different functions that share the same state.\n\n\n// INSECURE\nmapping (address => uint) private userBalances;\n\nfunction transfer(address to, uint amount) {\n    if (userBalances[msg.sender] >= amount) {\n       userBalances[to] += amount;\n       userBalances[msg.sender] -= amount;\n    }\n}\n\nfunction withdrawBalance() public {\n    uint amountToWithdraw = userBalances[msg.sender];\n    require(msg.sender.call.value(amountToWithdraw)()); // At this point, the caller's code is executed, and can call transfer()\n    userBalances[msg.sender] = 0;\n}\n\n\n\n\nIn this case, the attacker calls \ntransfer()\n when their code is executed on the external call in \nwithdrawBalance\n. Since their balance has not yet been set to 0, they are able to transfer the tokens even though they already received the withdrawal. This vulnerability was also used in the DAO attack.\n\n\nThe same solutions will work, with the same caveats. Also note that in this example, both functions were part of the same contract. However, the same bug can occur across multiple contracts, if those contracts share state.\n\n\nPitfalls in Race Condition Solutions\n\u00b6\n\n\nSince race conditions can occur across multiple functions, and even multiple contracts, any solution aimed at preventing reentry will not be sufficient.\n\n\nInstead, we have recommended finishing all internal work first, and only then calling the external function. This rule, if followed carefully, will allow you to avoid race conditions. However, you need to not only avoid calling external functions too soon, but also avoid calling functions which call external functions. For example, the following is insecure:\n\n\n// INSECURE\nmapping (address => uint) private userBalances;\nmapping (address => bool) private claimedBonus;\nmapping (address => uint) private rewardsForA;\n\nfunction withdraw(address recipient) public {\n    uint amountToWithdraw = userBalances[recipient];\n    rewardsForA[recipient] = 0;\n    require(recipient.call.value(amountToWithdraw)());\n}\n\nfunction getFirstWithdrawalBonus(address recipient) public {\n    require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n    rewardsForA[recipient] += 100;\n    withdraw(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.\n    claimedBonus[recipient] = true;\n}\n\n\n\n\nEven though \ngetFirstWithdrawalBonus()\n doesn't directly call an external contract, the call in \nwithdraw()\n is enough to make it vulnerable to a race condition. you therefore need to treat \nwithdraw()\n as if it were also untrusted.\n\n\nmapping (address => uint) private userBalances;\nmapping (address => bool) private claimedBonus;\nmapping (address => uint) private rewardsForA;\n\nfunction untrustedWithdraw(address recipient) public {\n    uint amountToWithdraw = userBalances[recipient];\n    rewardsForA[recipient] = 0;\n    require(recipient.call.value(amountToWithdraw)());\n}\n\nfunction untrustedGetFirstWithdrawalBonus(address recipient) public {\n    require(claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n    claimedBonus[recipient] = true;\n    rewardsForA[recipient] += 100;\n    untrustedWithdraw(recipient); // claimedBonus has been set to true, so reentry is impossible\n}\n\n\n\n\nIn addition to the fix making reentry impossible, \nuntrusted functions have been marked.\n This same pattern repeats at every level: since \nuntrustedGetFirstWithdrawalBonus()\n calls \nuntrustedWithdraw()\n, which calls an external contract, you must also treat \nuntrustedGetFirstWithdrawalBonus()\n as insecure.\n\n\nAnother solution often suggested is a \nmutex\n. This allows you to \"lock\" some state so it can only be changed by the owner of the lock. A simple example might look like this:\n\n\n// Note: This is a rudimentary example, and mutexes are particularly useful where there is substantial logic and/or shared state\nmapping (address => uint) private balances;\nbool private lockBalances;\n\nfunction deposit() payable public returns (bool) {\n    if (!lockBalances) {\n        lockBalances = true;\n        balances[msg.sender] += msg.value;\n        lockBalances = false;\n        return true;\n    }\n    revert();\n}\n\nfunction withdraw(uint amount) payable public returns (bool) {\n    if (!lockBalances && amount > 0 && balances[msg.sender] >= amount) {\n        lockBalances = true;\n\n        if (msg.sender.call(amount)()) { // Normally insecure, but the mutex saves it\n          balances[msg.sender] -= amount;\n        }\n\n        lockBalances = false;\n        return true;\n    }\n\n    revert();\n}\n\n\n\n\nIf the user tries to call \nwithdraw()\n again before the first call finishes, the lock will prevent it from having any effect. This can be an effective pattern, but it gets tricky when you have multiple contracts that need to cooperate. The following is insecure:\n\n\n// INSECURE\ncontract StateHolder {\n    uint private n;\n    address private lockHolder;\n\n    function getLock() {\n        require(lockHolder == 0);\n        lockHolder = msg.sender;\n    }\n\n    function releaseLock() {\n        lockHolder = 0;\n    }\n\n    function set(uint newState) {\n        require(msg.sender == lockHolder);\n        n = newState;\n    }\n}\n\n\n\n\nAn attacker can call \ngetLock()\n, and then never call \nreleaseLock()\n. If they do this, then the contract will be locked forever, and no further changes will be able to be made. If you use mutexes to protect against race conditions, you will need to carefully ensure that there are no ways for a lock to be claimed and never released. (There are other potential dangers when programming with mutexes, such as deadlocks and livelocks. You should consult the large amount of literature already written on mutexes, if you decide to go this route.)\n\n\n* Some may object to the use of the term \nrace condition\n since Ethereum does not currently have true parallelism. However, there is still the fundamental feature of logically distinct processes contending for resources, and the same sorts of pitfalls and potential solutions apply.\n\n\n\nTransaction-Ordering Dependence (TOD) / Front Running\n\u00b6\n\n\nAbove were examples of race conditions involving the attacker executing malicious code \nwithin a single transaction\n. The following are a different type of race condition inherent to Blockchains: the fact that \nthe order of transactions themselves\n (within a block) is easily subject to manipulation.\n\n\nSince a transaction is in the mempool for a short while, one can know what actions will occur, before it is included in a block. This can be troublesome for things like decentralized markets, where a transaction to buy some tokens can be seen, and a market order implemented before the other transaction gets included. Protecting against this is difficult, as it would come down to the specific contract itself. For example, in markets, it would be better to implement batch auctions (this also protects against high frequency trading concerns). Another way to use a pre-commit scheme (\u201cI\u2019m going to submit the details later\u201d).\n\n\nTimestamp Dependence\n\u00b6\n\n\nBe aware that the timestamp of the block can be manipulated by the miner, and all direct and indirect uses of the timestamp should be considered. \nBlock numbers\n and \naverage block time\n can be used to estimate time, but this is not future proof as block times may change (such as the changes expected during Casper).\n\n\nuint someVariable = now + 1;\n\nif (now % 2 == 0) { // the now can be manipulated by the miner\n\n}\n\nif ((someVariable - 100) % 2 == 0) { // someVariable can be manipulated by the miner\n\n}\n\n\n\n\nInteger Overflow and Underflow\n\u00b6\n\n\nBe aware there are around \n20 cases for overflow and underflow\n.\n\n\nConsider a simple token transfer:\n\n\nmapping (address => uint256) public balanceOf;\n\n// INSECURE\nfunction transfer(address _to, uint256 _value) {\n    /* Check if sender has balance */\n    require(balanceOf[msg.sender] >= _value);\n    /* Add and subtract new balances */\n    balanceOf[msg.sender] -= _value;\n    balanceOf[_to] += _value;\n}\n\n// SECURE\nfunction transfer(address _to, uint256 _value) {\n    /* Check if sender has balance and for overflows */\n    require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);\n\n    /* Add and subtract new balances */\n    balanceOf[msg.sender] -= _value;\n    balanceOf[_to] += _value;\n}\n\n\n\n\nIf a balance reaches the maximum uint value (2^256) it will circle back to zero. This checks for that condition. This may or may not be relevant, depending on the implementation. Think about whether or not the uint value has an opportunity to approach such a large number. Think about how the uint variable changes state, and who has authority to make such changes. If any user can call functions which update the uint value, it's more vulnerable to attack. If only an admin has access to change the variable's state, you might be safe. If a user can increment by only 1 at a time, you are probably also safe because there is no feasible way to reach this limit.\n\n\nThe same is true for underflow. If a uint is made to be less than zero, it will cause an underflow and get set to its maximum value.\n\n\nBe careful with the smaller data-types like uint8, uint16, uint24...etc: they can even more easily hit their maximum value.\n\n\nBe aware there are around \n20 cases for overflow and underflow\n.\n\n\nDoS with (Unexpected) revert\n\u00b6\n\n\nConsider a simple auction contract:\n\n\n// INSECURE\ncontract Auction {\n    address currentLeader;\n    uint highestBid;\n\n    function bid() payable {\n        require(msg.value > highestBid);\n\n        require(currentLeader.send(highestBid)); // Refund the old leader, if it fails then revert\n\n        currentLeader = msg.sender;\n        highestBid = msg.value;\n    }\n}\n\n\n\n\nWhen it tries to refund the old leader, it reverts if the refund fails. This means that a malicious bidder can become the leader while making sure that any refunds to their address will \nalways\n fail. In this way, they can prevent anyone else from calling the \nbid()\n function, and stay the leader forever. A recommendation is to set up a \npull payment system\n instead, as described earlier.\n\n\nAnother example is when a contract may iterate through an array to pay users (e.g., supporters in a crowdfunding contract). It's common to want to make sure that each payment succeeds. If not, one should revert. The issue is that if one call fails, you are reverting the whole payout system, meaning the loop will never complete. No one gets paid because one address is forcing an error.\n\n\naddress[] private refundAddresses;\nmapping (address => uint) public refunds;\n\n// bad\nfunction refundAll() public {\n    for(uint x; x < refundAddresses.length; x++) { // arbitrary length iteration based on how many addresses participated\n        require(refundAddresses[x].send(refunds[refundAddresses[x]])) // doubly bad, now a single failure on send will hold up all funds\n    }\n}\n\n\n\n\nAgain, the recommended solution is to \nfavor pull over push payments\n.\n\n\nDoS with Block Gas Limit\n\u00b6\n\n\nYou may have noticed another problem with the previous example: by paying out to everyone at once, you risk running into the block gas limit. Each Ethereum block can process a certain maximum amount of computation. If you try to go over that, your transaction will fail.\n\n\nThis can lead to problems even in the absence of an intentional attack. However, it's especially bad if an attacker can manipulate the amount of gas needed. In the case of the previous example, the attacker could add a bunch of addresses, each of which needs to get a very small refund. The gas cost of refunding each of the attacker's addresses could, therefore, end up being more than the gas limit, blocking the refund transaction from happening at all.\n\n\nThis is another reason to \nfavor pull over push payments\n.\n\n\nIf you absolutely must loop over an array of unknown size, then you should plan for it to potentially take multiple blocks, and therefore require multiple transactions. You will need to keep track of how far you've gone, and be able to resume from that point, as in the following example:\n\n\nstruct Payee {\n    address addr;\n    uint256 value;\n}\nPayee payees[];\nuint256 nextPayeeIndex;\n\nfunction payOut() {\n    uint256 i = nextPayeeIndex;\n    while (i < payees.length && msg.gas > 200000) {\n      payees[i].addr.send(payees[i].value);\n      i++;\n    }\n    nextPayeeIndex = i;\n}\n\n\n\n\nYou will need to make sure that nothing bad will happen if other transactions are processed while waiting for the next iteration of the \npayOut()\n function. So only use this pattern if absolutely necessary.\n\n\nCall Depth Attack\n\u00b6\n\n\nAs of the \nEIP 150\n hardfork, call depth attacks are no longer relevant\n*\n (all gas would be consumed well before reaching the 1024 call depth limit).",
            "title": "Known Attacks"
        },
        {
            "location": "/known_attacks/#race-conditions",
            "text": "One of the major dangers of calling external contracts is that they can take over the control flow, and make changes to your data that the calling function wasn't expecting. This class of bug can take many forms, and both of the major bugs that led to the DAO's collapse were bugs of this sort.",
            "title": "Race Conditions"
        },
        {
            "location": "/known_attacks/#reentrancy",
            "text": "The first version of this bug to be noticed involved functions that could be called repeatedly, before the first invocation of the function was finished. This may cause the different invocations of the function to interact in destructive ways.  // INSECURE\nmapping (address => uint) private userBalances;\n\nfunction withdrawBalance() public {\n    uint amountToWithdraw = userBalances[msg.sender];\n    require(msg.sender.call.value(amountToWithdraw)()); // At this point, the caller's code is executed, and can call withdrawBalance again\n    userBalances[msg.sender] = 0;\n}  Since the user's balance is not set to 0 until the very end of the function, the second (and later) invocations will still succeed, and will withdraw the balance over and over again. A very similar bug was one of the vulnerabilities in the DAO attack.  In the example given, the best way to avoid the problem is to  use  send()  instead of  call.value()() . This will prevent any external code from being executed.  However, if you can't remove the external call, the next simplest way to prevent this attack is to make sure you don't call an external function until you've done all the internal work you need to do:  mapping (address => uint) private userBalances;\n\nfunction withdrawBalance() public {\n    uint amountToWithdraw = userBalances[msg.sender];\n    userBalances[msg.sender] = 0;\n    require(msg.sender.call.value(amountToWithdraw)()); // The user's balance is already 0, so future invocations won't withdraw anything\n}  Note that if you had another function which called  withdrawBalance() , it would be potentially subject to the same attack, so you must treat any function which calls an untrusted contract as itself untrusted. See below for further discussion of potential solutions.",
            "title": "Reentrancy"
        },
        {
            "location": "/known_attacks/#cross-function-race-conditions",
            "text": "An attacker may also be able to do a similar attack using two different functions that share the same state.  // INSECURE\nmapping (address => uint) private userBalances;\n\nfunction transfer(address to, uint amount) {\n    if (userBalances[msg.sender] >= amount) {\n       userBalances[to] += amount;\n       userBalances[msg.sender] -= amount;\n    }\n}\n\nfunction withdrawBalance() public {\n    uint amountToWithdraw = userBalances[msg.sender];\n    require(msg.sender.call.value(amountToWithdraw)()); // At this point, the caller's code is executed, and can call transfer()\n    userBalances[msg.sender] = 0;\n}  In this case, the attacker calls  transfer()  when their code is executed on the external call in  withdrawBalance . Since their balance has not yet been set to 0, they are able to transfer the tokens even though they already received the withdrawal. This vulnerability was also used in the DAO attack.  The same solutions will work, with the same caveats. Also note that in this example, both functions were part of the same contract. However, the same bug can occur across multiple contracts, if those contracts share state.",
            "title": "Cross-function Race Conditions"
        },
        {
            "location": "/known_attacks/#pitfalls-in-race-condition-solutions",
            "text": "Since race conditions can occur across multiple functions, and even multiple contracts, any solution aimed at preventing reentry will not be sufficient.  Instead, we have recommended finishing all internal work first, and only then calling the external function. This rule, if followed carefully, will allow you to avoid race conditions. However, you need to not only avoid calling external functions too soon, but also avoid calling functions which call external functions. For example, the following is insecure:  // INSECURE\nmapping (address => uint) private userBalances;\nmapping (address => bool) private claimedBonus;\nmapping (address => uint) private rewardsForA;\n\nfunction withdraw(address recipient) public {\n    uint amountToWithdraw = userBalances[recipient];\n    rewardsForA[recipient] = 0;\n    require(recipient.call.value(amountToWithdraw)());\n}\n\nfunction getFirstWithdrawalBonus(address recipient) public {\n    require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n    rewardsForA[recipient] += 100;\n    withdraw(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.\n    claimedBonus[recipient] = true;\n}  Even though  getFirstWithdrawalBonus()  doesn't directly call an external contract, the call in  withdraw()  is enough to make it vulnerable to a race condition. you therefore need to treat  withdraw()  as if it were also untrusted.  mapping (address => uint) private userBalances;\nmapping (address => bool) private claimedBonus;\nmapping (address => uint) private rewardsForA;\n\nfunction untrustedWithdraw(address recipient) public {\n    uint amountToWithdraw = userBalances[recipient];\n    rewardsForA[recipient] = 0;\n    require(recipient.call.value(amountToWithdraw)());\n}\n\nfunction untrustedGetFirstWithdrawalBonus(address recipient) public {\n    require(claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n    claimedBonus[recipient] = true;\n    rewardsForA[recipient] += 100;\n    untrustedWithdraw(recipient); // claimedBonus has been set to true, so reentry is impossible\n}  In addition to the fix making reentry impossible,  untrusted functions have been marked.  This same pattern repeats at every level: since  untrustedGetFirstWithdrawalBonus()  calls  untrustedWithdraw() , which calls an external contract, you must also treat  untrustedGetFirstWithdrawalBonus()  as insecure.  Another solution often suggested is a  mutex . This allows you to \"lock\" some state so it can only be changed by the owner of the lock. A simple example might look like this:  // Note: This is a rudimentary example, and mutexes are particularly useful where there is substantial logic and/or shared state\nmapping (address => uint) private balances;\nbool private lockBalances;\n\nfunction deposit() payable public returns (bool) {\n    if (!lockBalances) {\n        lockBalances = true;\n        balances[msg.sender] += msg.value;\n        lockBalances = false;\n        return true;\n    }\n    revert();\n}\n\nfunction withdraw(uint amount) payable public returns (bool) {\n    if (!lockBalances && amount > 0 && balances[msg.sender] >= amount) {\n        lockBalances = true;\n\n        if (msg.sender.call(amount)()) { // Normally insecure, but the mutex saves it\n          balances[msg.sender] -= amount;\n        }\n\n        lockBalances = false;\n        return true;\n    }\n\n    revert();\n}  If the user tries to call  withdraw()  again before the first call finishes, the lock will prevent it from having any effect. This can be an effective pattern, but it gets tricky when you have multiple contracts that need to cooperate. The following is insecure:  // INSECURE\ncontract StateHolder {\n    uint private n;\n    address private lockHolder;\n\n    function getLock() {\n        require(lockHolder == 0);\n        lockHolder = msg.sender;\n    }\n\n    function releaseLock() {\n        lockHolder = 0;\n    }\n\n    function set(uint newState) {\n        require(msg.sender == lockHolder);\n        n = newState;\n    }\n}  An attacker can call  getLock() , and then never call  releaseLock() . If they do this, then the contract will be locked forever, and no further changes will be able to be made. If you use mutexes to protect against race conditions, you will need to carefully ensure that there are no ways for a lock to be claimed and never released. (There are other potential dangers when programming with mutexes, such as deadlocks and livelocks. You should consult the large amount of literature already written on mutexes, if you decide to go this route.)  * Some may object to the use of the term  race condition  since Ethereum does not currently have true parallelism. However, there is still the fundamental feature of logically distinct processes contending for resources, and the same sorts of pitfalls and potential solutions apply.",
            "title": "Pitfalls in Race Condition Solutions"
        },
        {
            "location": "/known_attacks/#transaction-ordering-dependence-tod-front-running",
            "text": "Above were examples of race conditions involving the attacker executing malicious code  within a single transaction . The following are a different type of race condition inherent to Blockchains: the fact that  the order of transactions themselves  (within a block) is easily subject to manipulation.  Since a transaction is in the mempool for a short while, one can know what actions will occur, before it is included in a block. This can be troublesome for things like decentralized markets, where a transaction to buy some tokens can be seen, and a market order implemented before the other transaction gets included. Protecting against this is difficult, as it would come down to the specific contract itself. For example, in markets, it would be better to implement batch auctions (this also protects against high frequency trading concerns). Another way to use a pre-commit scheme (\u201cI\u2019m going to submit the details later\u201d).",
            "title": "Transaction-Ordering Dependence (TOD) / Front Running"
        },
        {
            "location": "/known_attacks/#timestamp-dependence",
            "text": "Be aware that the timestamp of the block can be manipulated by the miner, and all direct and indirect uses of the timestamp should be considered.  Block numbers  and  average block time  can be used to estimate time, but this is not future proof as block times may change (such as the changes expected during Casper).  uint someVariable = now + 1;\n\nif (now % 2 == 0) { // the now can be manipulated by the miner\n\n}\n\nif ((someVariable - 100) % 2 == 0) { // someVariable can be manipulated by the miner\n\n}",
            "title": "Timestamp Dependence"
        },
        {
            "location": "/known_attacks/#integer-overflow-and-underflow",
            "text": "Be aware there are around  20 cases for overflow and underflow .  Consider a simple token transfer:  mapping (address => uint256) public balanceOf;\n\n// INSECURE\nfunction transfer(address _to, uint256 _value) {\n    /* Check if sender has balance */\n    require(balanceOf[msg.sender] >= _value);\n    /* Add and subtract new balances */\n    balanceOf[msg.sender] -= _value;\n    balanceOf[_to] += _value;\n}\n\n// SECURE\nfunction transfer(address _to, uint256 _value) {\n    /* Check if sender has balance and for overflows */\n    require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);\n\n    /* Add and subtract new balances */\n    balanceOf[msg.sender] -= _value;\n    balanceOf[_to] += _value;\n}  If a balance reaches the maximum uint value (2^256) it will circle back to zero. This checks for that condition. This may or may not be relevant, depending on the implementation. Think about whether or not the uint value has an opportunity to approach such a large number. Think about how the uint variable changes state, and who has authority to make such changes. If any user can call functions which update the uint value, it's more vulnerable to attack. If only an admin has access to change the variable's state, you might be safe. If a user can increment by only 1 at a time, you are probably also safe because there is no feasible way to reach this limit.  The same is true for underflow. If a uint is made to be less than zero, it will cause an underflow and get set to its maximum value.  Be careful with the smaller data-types like uint8, uint16, uint24...etc: they can even more easily hit their maximum value.  Be aware there are around  20 cases for overflow and underflow .",
            "title": "Integer Overflow and Underflow"
        },
        {
            "location": "/known_attacks/#dos-with-unexpected-revert",
            "text": "Consider a simple auction contract:  // INSECURE\ncontract Auction {\n    address currentLeader;\n    uint highestBid;\n\n    function bid() payable {\n        require(msg.value > highestBid);\n\n        require(currentLeader.send(highestBid)); // Refund the old leader, if it fails then revert\n\n        currentLeader = msg.sender;\n        highestBid = msg.value;\n    }\n}  When it tries to refund the old leader, it reverts if the refund fails. This means that a malicious bidder can become the leader while making sure that any refunds to their address will  always  fail. In this way, they can prevent anyone else from calling the  bid()  function, and stay the leader forever. A recommendation is to set up a  pull payment system  instead, as described earlier.  Another example is when a contract may iterate through an array to pay users (e.g., supporters in a crowdfunding contract). It's common to want to make sure that each payment succeeds. If not, one should revert. The issue is that if one call fails, you are reverting the whole payout system, meaning the loop will never complete. No one gets paid because one address is forcing an error.  address[] private refundAddresses;\nmapping (address => uint) public refunds;\n\n// bad\nfunction refundAll() public {\n    for(uint x; x < refundAddresses.length; x++) { // arbitrary length iteration based on how many addresses participated\n        require(refundAddresses[x].send(refunds[refundAddresses[x]])) // doubly bad, now a single failure on send will hold up all funds\n    }\n}  Again, the recommended solution is to  favor pull over push payments .",
            "title": "DoS with (Unexpected) revert"
        },
        {
            "location": "/known_attacks/#dos-with-block-gas-limit",
            "text": "You may have noticed another problem with the previous example: by paying out to everyone at once, you risk running into the block gas limit. Each Ethereum block can process a certain maximum amount of computation. If you try to go over that, your transaction will fail.  This can lead to problems even in the absence of an intentional attack. However, it's especially bad if an attacker can manipulate the amount of gas needed. In the case of the previous example, the attacker could add a bunch of addresses, each of which needs to get a very small refund. The gas cost of refunding each of the attacker's addresses could, therefore, end up being more than the gas limit, blocking the refund transaction from happening at all.  This is another reason to  favor pull over push payments .  If you absolutely must loop over an array of unknown size, then you should plan for it to potentially take multiple blocks, and therefore require multiple transactions. You will need to keep track of how far you've gone, and be able to resume from that point, as in the following example:  struct Payee {\n    address addr;\n    uint256 value;\n}\nPayee payees[];\nuint256 nextPayeeIndex;\n\nfunction payOut() {\n    uint256 i = nextPayeeIndex;\n    while (i < payees.length && msg.gas > 200000) {\n      payees[i].addr.send(payees[i].value);\n      i++;\n    }\n    nextPayeeIndex = i;\n}  You will need to make sure that nothing bad will happen if other transactions are processed while waiting for the next iteration of the  payOut()  function. So only use this pattern if absolutely necessary.",
            "title": "DoS with Block Gas Limit"
        },
        {
            "location": "/known_attacks/#call-depth-attack",
            "text": "As of the  EIP 150  hardfork, call depth attacks are no longer relevant *  (all gas would be consumed well before reaching the 1024 call depth limit).",
            "title": "Call Depth Attack"
        },
        {
            "location": "/software_engineering/",
            "text": "As we discussed in the \nGeneral Philosophy\n section, it is not enough to protect yourself against the known attacks. Since the cost of failure on a blockchain can be very high, you must also adapt the way you write software, to account for that risk.\n\n\nThe approach we advocate is to \"prepare for failure\". It is impossible to know in advance whether your code is secure. However, you can architect your contracts in a way that allows them to fail gracefully, and with minimal damage. This section presents a variety of techniques that will help you prepare for failure.\n\n\nNote: There's always a risk when you add a new component to your system. A badly designed fail-safe could itself become a vulnerability - as can the interaction between a number of well designed fail-safes. Be thoughtful about each technique you use in your contracts, and consider carefully how they work together to create a robust system.\n\n\nUpgrading Broken Contracts\n\u00b6\n\n\nCode will need to be changed if errors are discovered or if improvements need to be made. It is no good to discover a bug, but have no way to deal with it.\n\n\nDesigning an effective upgrade system for smart contracts is an area of active research, and we won't be able to cover all of the complications in this document. However, there are two basic approaches that are most commonly used. The simpler of the two is to have a registry contract that holds the address of the latest version of the contract. A more seamless approach for contract users is to have a contract that forwards calls and data onto the latest version of the contract.\n\n\nWhatever the technique, it's important to have modularization and good separation between components, so that code changes do not break functionality, orphan data, or require substantial costs to port. In particular, it is usually beneficial to separate complex logic from your data storage, so that you do not have to recreate all of the data in order to change the functionality.\n\n\nIt's also critical to have a secure way for parties to decide to upgrade the code. Depending on your contract, code changes may need to be approved by a single trusted party, a group of members, or a vote of the full set of stakeholders. If this process can take some time, you will want to consider if there are other ways to react more quickly in case of an attack, such as an \nemergency stop or circuit-breaker\n.\n\n\nExample 1: Use a registry contract to store latest version of a contract\n\n\nIn this example, the calls aren't forwarded, so users should fetch the current address each time before interacting with it.\n\n\ncontract SomeRegister {\n    address backendContract;\n    address[] previousBackends;\n    address owner;\n\n    function SomeRegister() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner)\n        _;\n    }\n\n    function changeBackend(address newBackend) public\n    onlyOwner()\n    returns (bool)\n    {\n        if(newBackend != backendContract) {\n            previousBackends.push(backendContract);\n            backendContract = newBackend;\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\nThere are two main disadvantages to this approach:\n\n\n\n\nUsers must always look up the current address, and anyone who fails to do so risks using an old version of the contract\n\n\nYou will need to think carefully about how to deal with the contract data when you replace the contract\n\n\n\n\nThe alternate approach is to have a contract forward calls and data to the latest version of the contract:\n\n\nExample 2: \nUse a \nDELEGATECALL\n to forward data and calls\n\n\ncontract Relay {\n    address public currentVersion;\n    address public owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function Relay(address initAddr) {\n        currentVersion = initAddr;\n        owner = msg.sender; // this owner may be another contract with multisig, not a single contract owner\n    }\n\n    function changeContract(address newVersion) public\n    onlyOwner()\n    {\n        currentVersion = newVersion;\n    }\n\n    function() {\n        require(currentVersion.delegatecall(msg.data));\n    }\n}\n\n\n\n\nThis approach avoids the previous problems but has problems of its own. You must be extremely careful with how you store data in this contract. If your new contract has a different storage layout than the first, your data may end up corrupted. Additionally, this simple version of the pattern cannot return values from functions, only forward them, which limits its applicability. (\nMore complex implementations\n attempt to solve this with in-line assembly code and a registry of return sizes.)\n\n\nRegardless of your approach, it is important to have some way to upgrade your contracts, or they will become unusable when the inevitable bugs are discovered in them.\n\n\nCircuit Breakers (Pause contract functionality)\n\u00b6\n\n\nCircuit breakers stop execution if certain conditions are met, and can be useful when new errors are discovered. For example, most actions may be suspended in a contract if a bug is discovered, and the only action now active is a withdrawal. You can either give certain trusted parties the ability to trigger the circuit breaker or else have programmatic rules that automatically trigger the certain breaker when certain conditions are met.\n\n\nExample:\n\n\nbool private stopped = false;\naddress private owner;\n\nmodifier isAdmin() {\n    require(msg.sender == owner);\n    _;\n}\n\nfunction toggleContractActive() isAdmin public\n{\n    // You can add an additional modifier that restricts stopping a contract to be based on another action, such as a vote of users\n    stopped = !stopped;\n}\n\nmodifier stopInEmergency { if (!stopped) _; }\nmodifier onlyInEmergency { if (stopped) _; }\n\nfunction deposit() stopInEmergency public\n{\n    // some code\n}\n\nfunction withdraw() onlyInEmergency public\n{\n    // some code\n}\n\n\n\n\nSpeed Bumps (Delay contract actions)\n\u00b6\n\n\nSpeed bumps slow down actions, so that if malicious actions occur, there is time to recover. For example, \nThe DAO\n required 27 days between a successful request to split the DAO and the ability to do so. This ensured the funds were kept within the contract, increasing the likelihood of recovery. In the case of the DAO, there was no effective action that could be taken during the time given by the speed bump, but in combination with our other techniques, they can be quite effective.\n\n\nExample:\n\n\nstruct RequestedWithdrawal {\n    uint amount;\n    uint time;\n}\n\nmapping (address => uint) private balances;\nmapping (address => RequestedWithdrawal) private requestedWithdrawals;\nuint constant withdrawalWaitPeriod = 28 days; // 4 weeks\n\nfunction requestWithdrawal() public {\n    if (balances[msg.sender] > 0) {\n        uint amountToWithdraw = balances[msg.sender];\n        balances[msg.sender] = 0; // for simplicity, we withdraw everything;\n        // presumably, the deposit function prevents new deposits when withdrawals are in progress\n\n        requestedWithdrawals[msg.sender] = RequestedWithdrawal({\n            amount: amountToWithdraw,\n            time: now\n        });\n    }\n}\n\nfunction withdraw() public {\n    if(requestedWithdrawals[msg.sender].amount > 0 && now > requestedWithdrawals[msg.sender].time + withdrawalWaitPeriod) {\n        uint amountToWithdraw = requestedWithdrawals[msg.sender].amount;\n        requestedWithdrawals[msg.sender].amount = 0;\n\n        require(msg.sender.send(amountToWithdraw));\n    }\n}\n\n\n\n\nRate Limiting\n\u00b6\n\n\nRate limiting halts or requires approval for substantial changes. For example, a depositor may only be allowed to withdraw a certain amount or percentage of total deposits over a certain time period (e.g., max 100 ether over 1 day) - additional withdrawals in that time period may fail or require some sort of special approval. Or the rate limit could be at the contract level, with only a certain amount of tokens issued by the contract over a time period.\n\n\nExample\n\n\nContract Rollout\n\u00b6\n\n\nContracts should have a substantial and prolonged testing period - before substantial money is put at risk.\n\n\nAt minimum, you should:\n\n\n\n\nHave a full test suite with 100% test coverage (or close to it)\n\n\nDeploy on your own testnet\n\n\nDeploy on the public testnet with substantial testing and bug bounties\n\n\nExhaustive testing should allow various players to interact with the contract at volume\n\n\nDeploy on the mainnet in beta, with limits to the amount at risk\n\n\n\n\nAutomatic Deprecation\n\u00b6\n\n\nDuring testing, you can force an automatic deprecation by preventing any actions, after a certain time period. For example, an alpha contract may work for several weeks and then automatically shut down all actions, except for the final withdrawal.\n\n\nmodifier isActive() {\n    require(block.number <= SOME_BLOCK_NUMBER);\n    _;\n}\n\nfunction deposit() public\nisActive() {\n    // some code\n}\n\nfunction withdraw() public {\n    // some code\n}\n\n\n\n\nRestrict amount of Ether per user/contract\n\u00b6\n\n\nIn the early stages, you can restrict the amount of Ether for any user (or for the entire contract) - reducing the risk.\n\n\nBug Bounty Programs\n\u00b6\n\n\nSome tips for running bounty programs:\n\n\n\n\nDecide which currency bounties will be distributed in (BTC and/or ETH)\n\n\nDecide on an estimated total budget for bounty rewards\n\n\nFrom the budget, determine three tiers of rewards:\n\n\nsmallest reward you are willing to give out\n\n\nhighest reward that's usually awardable\n\n\nan extra range to be awarded in case of very severe vulnerabilities\n\n\nDetermine who the bounty judges are (3 may be ideal typically)\n\n\nLead developer should probably be one of the bounty judges\n\n\nWhen a bug report is received, the lead developer, with advice from judges, should evaluate the severity of the bug\n\n\nWork at this stage should be in a private repo, and the issue filed on Github\n\n\nIf it's a bug that should be fixed, in the private repo, a developer should write a test case, which should fail and thus confirm the bug\n\n\nDeveloper should implement the fix and ensure the test now passes; writing additional tests as needed\n\n\nShow the bounty hunter the fix; merge the fix back to the public repo is one way\n\n\nDetermine if bounty hunter has any other feedback about the fix\n\n\nBounty judges determine the size of the reward, based on their evaluation of both the \nlikelihood\n and \nimpact\n of the bug.\n\n\nKeep bounty participants informed throughout the process, and then strive to avoid delays in sending them their reward\n\n\n\n\nFor an example of the three tiers of rewards, see \nEthereum's Bounty Program\n:\n\n\n\n\nThe value of rewards paid out will vary depending on severity of impact. Rewards for minor 'harmless' bugs start at 0.05 BTC. Major bugs, for example leading to consensus issues, will be rewarded up to 5 BTC. Much higher rewards are possible (up to 25 BTC) in case of very severe vulnerabilities.",
            "title": "Software Engineering Techniques"
        },
        {
            "location": "/software_engineering/#upgrading-broken-contracts",
            "text": "Code will need to be changed if errors are discovered or if improvements need to be made. It is no good to discover a bug, but have no way to deal with it.  Designing an effective upgrade system for smart contracts is an area of active research, and we won't be able to cover all of the complications in this document. However, there are two basic approaches that are most commonly used. The simpler of the two is to have a registry contract that holds the address of the latest version of the contract. A more seamless approach for contract users is to have a contract that forwards calls and data onto the latest version of the contract.  Whatever the technique, it's important to have modularization and good separation between components, so that code changes do not break functionality, orphan data, or require substantial costs to port. In particular, it is usually beneficial to separate complex logic from your data storage, so that you do not have to recreate all of the data in order to change the functionality.  It's also critical to have a secure way for parties to decide to upgrade the code. Depending on your contract, code changes may need to be approved by a single trusted party, a group of members, or a vote of the full set of stakeholders. If this process can take some time, you will want to consider if there are other ways to react more quickly in case of an attack, such as an  emergency stop or circuit-breaker .  Example 1: Use a registry contract to store latest version of a contract  In this example, the calls aren't forwarded, so users should fetch the current address each time before interacting with it.  contract SomeRegister {\n    address backendContract;\n    address[] previousBackends;\n    address owner;\n\n    function SomeRegister() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner)\n        _;\n    }\n\n    function changeBackend(address newBackend) public\n    onlyOwner()\n    returns (bool)\n    {\n        if(newBackend != backendContract) {\n            previousBackends.push(backendContract);\n            backendContract = newBackend;\n            return true;\n        }\n\n        return false;\n    }\n}  There are two main disadvantages to this approach:   Users must always look up the current address, and anyone who fails to do so risks using an old version of the contract  You will need to think carefully about how to deal with the contract data when you replace the contract   The alternate approach is to have a contract forward calls and data to the latest version of the contract:  Example 2:  Use a  DELEGATECALL  to forward data and calls  contract Relay {\n    address public currentVersion;\n    address public owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function Relay(address initAddr) {\n        currentVersion = initAddr;\n        owner = msg.sender; // this owner may be another contract with multisig, not a single contract owner\n    }\n\n    function changeContract(address newVersion) public\n    onlyOwner()\n    {\n        currentVersion = newVersion;\n    }\n\n    function() {\n        require(currentVersion.delegatecall(msg.data));\n    }\n}  This approach avoids the previous problems but has problems of its own. You must be extremely careful with how you store data in this contract. If your new contract has a different storage layout than the first, your data may end up corrupted. Additionally, this simple version of the pattern cannot return values from functions, only forward them, which limits its applicability. ( More complex implementations  attempt to solve this with in-line assembly code and a registry of return sizes.)  Regardless of your approach, it is important to have some way to upgrade your contracts, or they will become unusable when the inevitable bugs are discovered in them.",
            "title": "Upgrading Broken Contracts"
        },
        {
            "location": "/software_engineering/#circuit-breakers-pause-contract-functionality",
            "text": "Circuit breakers stop execution if certain conditions are met, and can be useful when new errors are discovered. For example, most actions may be suspended in a contract if a bug is discovered, and the only action now active is a withdrawal. You can either give certain trusted parties the ability to trigger the circuit breaker or else have programmatic rules that automatically trigger the certain breaker when certain conditions are met.  Example:  bool private stopped = false;\naddress private owner;\n\nmodifier isAdmin() {\n    require(msg.sender == owner);\n    _;\n}\n\nfunction toggleContractActive() isAdmin public\n{\n    // You can add an additional modifier that restricts stopping a contract to be based on another action, such as a vote of users\n    stopped = !stopped;\n}\n\nmodifier stopInEmergency { if (!stopped) _; }\nmodifier onlyInEmergency { if (stopped) _; }\n\nfunction deposit() stopInEmergency public\n{\n    // some code\n}\n\nfunction withdraw() onlyInEmergency public\n{\n    // some code\n}",
            "title": "Circuit Breakers (Pause contract functionality)"
        },
        {
            "location": "/software_engineering/#speed-bumps-delay-contract-actions",
            "text": "Speed bumps slow down actions, so that if malicious actions occur, there is time to recover. For example,  The DAO  required 27 days between a successful request to split the DAO and the ability to do so. This ensured the funds were kept within the contract, increasing the likelihood of recovery. In the case of the DAO, there was no effective action that could be taken during the time given by the speed bump, but in combination with our other techniques, they can be quite effective.  Example:  struct RequestedWithdrawal {\n    uint amount;\n    uint time;\n}\n\nmapping (address => uint) private balances;\nmapping (address => RequestedWithdrawal) private requestedWithdrawals;\nuint constant withdrawalWaitPeriod = 28 days; // 4 weeks\n\nfunction requestWithdrawal() public {\n    if (balances[msg.sender] > 0) {\n        uint amountToWithdraw = balances[msg.sender];\n        balances[msg.sender] = 0; // for simplicity, we withdraw everything;\n        // presumably, the deposit function prevents new deposits when withdrawals are in progress\n\n        requestedWithdrawals[msg.sender] = RequestedWithdrawal({\n            amount: amountToWithdraw,\n            time: now\n        });\n    }\n}\n\nfunction withdraw() public {\n    if(requestedWithdrawals[msg.sender].amount > 0 && now > requestedWithdrawals[msg.sender].time + withdrawalWaitPeriod) {\n        uint amountToWithdraw = requestedWithdrawals[msg.sender].amount;\n        requestedWithdrawals[msg.sender].amount = 0;\n\n        require(msg.sender.send(amountToWithdraw));\n    }\n}",
            "title": "Speed Bumps (Delay contract actions)"
        },
        {
            "location": "/software_engineering/#rate-limiting",
            "text": "Rate limiting halts or requires approval for substantial changes. For example, a depositor may only be allowed to withdraw a certain amount or percentage of total deposits over a certain time period (e.g., max 100 ether over 1 day) - additional withdrawals in that time period may fail or require some sort of special approval. Or the rate limit could be at the contract level, with only a certain amount of tokens issued by the contract over a time period.  Example",
            "title": "Rate Limiting"
        },
        {
            "location": "/software_engineering/#contract-rollout",
            "text": "Contracts should have a substantial and prolonged testing period - before substantial money is put at risk.  At minimum, you should:   Have a full test suite with 100% test coverage (or close to it)  Deploy on your own testnet  Deploy on the public testnet with substantial testing and bug bounties  Exhaustive testing should allow various players to interact with the contract at volume  Deploy on the mainnet in beta, with limits to the amount at risk",
            "title": "Contract Rollout"
        },
        {
            "location": "/software_engineering/#automatic-deprecation",
            "text": "During testing, you can force an automatic deprecation by preventing any actions, after a certain time period. For example, an alpha contract may work for several weeks and then automatically shut down all actions, except for the final withdrawal.  modifier isActive() {\n    require(block.number <= SOME_BLOCK_NUMBER);\n    _;\n}\n\nfunction deposit() public\nisActive() {\n    // some code\n}\n\nfunction withdraw() public {\n    // some code\n}",
            "title": "Automatic Deprecation"
        },
        {
            "location": "/software_engineering/#restrict-amount-of-ether-per-usercontract",
            "text": "In the early stages, you can restrict the amount of Ether for any user (or for the entire contract) - reducing the risk.",
            "title": "Restrict amount of Ether per user/contract"
        },
        {
            "location": "/software_engineering/#bug-bounty-programs",
            "text": "Some tips for running bounty programs:   Decide which currency bounties will be distributed in (BTC and/or ETH)  Decide on an estimated total budget for bounty rewards  From the budget, determine three tiers of rewards:  smallest reward you are willing to give out  highest reward that's usually awardable  an extra range to be awarded in case of very severe vulnerabilities  Determine who the bounty judges are (3 may be ideal typically)  Lead developer should probably be one of the bounty judges  When a bug report is received, the lead developer, with advice from judges, should evaluate the severity of the bug  Work at this stage should be in a private repo, and the issue filed on Github  If it's a bug that should be fixed, in the private repo, a developer should write a test case, which should fail and thus confirm the bug  Developer should implement the fix and ensure the test now passes; writing additional tests as needed  Show the bounty hunter the fix; merge the fix back to the public repo is one way  Determine if bounty hunter has any other feedback about the fix  Bounty judges determine the size of the reward, based on their evaluation of both the  likelihood  and  impact  of the bug.  Keep bounty participants informed throughout the process, and then strive to avoid delays in sending them their reward   For an example of the three tiers of rewards, see  Ethereum's Bounty Program :   The value of rewards paid out will vary depending on severity of impact. Rewards for minor 'harmless' bugs start at 0.05 BTC. Major bugs, for example leading to consensus issues, will be rewarded up to 5 BTC. Much higher rewards are possible (up to 25 BTC) in case of very severe vulnerabilities.",
            "title": "Bug Bounty Programs"
        },
        {
            "location": "/documentation_procedures/",
            "text": "Security-related Documentation and Procedures\n\u00b6\n\n\nWhen launching a contract that will have substantial funds or is required to be mission critical, it is important to include proper documentation. Some documentation related to security includes:\n\n\nSpecifications and Rollout Plans\n\n\n\n\nSpecs, diagrams, state machines, models, and other documentation that helps auditors, reviewers, and the community understand what the system is intended to do.\n\n\nMany bugs can be found just from the specifications, and they are the least costly to fix.\n\n\nRollout plans that include details listed \nhere\n, and target dates.\n\n\n\n\nStatus\n\n\n\n\nWhere current code is deployed\n\n\nCompiler version, flags used, and steps for verifying the deployed bytecode matches the source code\n\n\nCompiler versions and flags that will be used for the different phases of rollout.\n\n\nCurrent status of deployed code (including outstanding issues, performance stats, etc.)\n\n\n\n\nKnown Issues\n\n\n\n\nKey risks with contract\n\n\ne.g., You can lose all your money, hacker can vote for certain outcomes\n\n\nAll known bugs/limitations\n\n\nPotential attacks and mitigants\n\n\nPotential conflicts of interest (e.g., will be using yourself, like Slock.it did with the DAO)\n\n\n\n\nHistory\n\n\n\n\nTesting (including usage stats, discovered bugs, length of testing)\n\n\nPeople who have reviewed code (and their key feedback)\n\n\n\n\nProcedures\n\n\n\n\nAction plan in case a bug is discovered (e.g., emergency options, public notification process, etc.)\n\n\nWind down process if something goes wrong (e.g., funders will get percentage of your balance before attack, from remaining funds)\n\n\nResponsible disclosure policy (e.g., where to report bugs found, the rules of any bug bounty program)\n\n\nRecourse in case of failure (e.g., insurance, penalty fund, no recourse)\n\n\n\n\nContact Information\n\n\n\n\nWho to contact with issues\n\n\nNames of programmers and/or other important parties\n\n\nChat room where questions can be asked",
            "title": "Documentation and Procedures"
        },
        {
            "location": "/documentation_procedures/#security-related-documentation-and-procedures",
            "text": "When launching a contract that will have substantial funds or is required to be mission critical, it is important to include proper documentation. Some documentation related to security includes:  Specifications and Rollout Plans   Specs, diagrams, state machines, models, and other documentation that helps auditors, reviewers, and the community understand what the system is intended to do.  Many bugs can be found just from the specifications, and they are the least costly to fix.  Rollout plans that include details listed  here , and target dates.   Status   Where current code is deployed  Compiler version, flags used, and steps for verifying the deployed bytecode matches the source code  Compiler versions and flags that will be used for the different phases of rollout.  Current status of deployed code (including outstanding issues, performance stats, etc.)   Known Issues   Key risks with contract  e.g., You can lose all your money, hacker can vote for certain outcomes  All known bugs/limitations  Potential attacks and mitigants  Potential conflicts of interest (e.g., will be using yourself, like Slock.it did with the DAO)   History   Testing (including usage stats, discovered bugs, length of testing)  People who have reviewed code (and their key feedback)   Procedures   Action plan in case a bug is discovered (e.g., emergency options, public notification process, etc.)  Wind down process if something goes wrong (e.g., funders will get percentage of your balance before attack, from remaining funds)  Responsible disclosure policy (e.g., where to report bugs found, the rules of any bug bounty program)  Recourse in case of failure (e.g., insurance, penalty fund, no recourse)   Contact Information   Who to contact with issues  Names of programmers and/or other important parties  Chat room where questions can be asked",
            "title": "Security-related Documentation and Procedures"
        },
        {
            "location": "/security_tools/",
            "text": "Static Analysis\n\u00b6\n\n\n\n\nOyente\n - Analyze Ethereum code to find common vulnerabilities, based on this \npaper\n.\n\n\nsolidity-coverage\n - Code coverage for Solidity testing.\n\n\nSolgraph\n - Generates a DOT graph that visualizes function control flow of a Solidity contract and highlights potential security vulnerabilities.\n\n\n\n\nLinters\n\u00b6\n\n\nLinters improve code quality by enforcing rules for style and composition, making code easier to read and review.\n\n\n\n\nSolium\n - Yet another Solidity linting.\n\n\nSolint\n - Solidity linting that helps you enforce consistent conventions and avoid errors in your Solidity smart-contracts.\n\n\nSolcheck\n - A linter for Solidity code written in JS and heavily inspired by eslint.",
            "title": "Security Tools"
        },
        {
            "location": "/security_tools/#static-analysis",
            "text": "Oyente  - Analyze Ethereum code to find common vulnerabilities, based on this  paper .  solidity-coverage  - Code coverage for Solidity testing.  Solgraph  - Generates a DOT graph that visualizes function control flow of a Solidity contract and highlights potential security vulnerabilities.",
            "title": "Static Analysis"
        },
        {
            "location": "/security_tools/#linters",
            "text": "Linters improve code quality by enforcing rules for style and composition, making code easier to read and review.   Solium  - Yet another Solidity linting.  Solint  - Solidity linting that helps you enforce consistent conventions and avoid errors in your Solidity smart-contracts.  Solcheck  - A linter for Solidity code written in JS and heavily inspired by eslint.",
            "title": "Linters"
        },
        {
            "location": "/future_improvements/",
            "text": "Editor Security Warnings\n: Editors will soon alert for common security errors, not just compilation errors. Browser Solidity is getting these features soon.\n\n\n\n\n\n\nNew functional languages that compile to EVM bytecode\n: Functional languages gives certain guarantees over procedural languages like Solidity, namely immutability within a function and strong compile time checking. This can reduce the risk of errors by providing deterministic behavior. (for more see \nthis\n, Curry-Howard correspondence, and linear logic)",
            "title": "Future improvements"
        },
        {
            "location": "/bibliography/",
            "text": "A lot of this document contains code, examples and insights gained from various parts already written by the community.\nHere are some of them.  Feel free to add more.\n\n\nBy Ethereum core developers\n\u00b6\n\n\n\n\nHow to Write Safe Smart Contracts\n (Christian Reitwiessner)\n\n\nSmart Contract Security\n (Christian Reitwiessner)\n\n\nThinking about Smart Contract Security\n (Vitalik Buterin)\n\n\nSolidity\n\n\nSolidity Security Considerations\n\n\n\n\nBy Community\n\u00b6\n\n\n\n\nhttp://forum.ethereum.org/discussion/1317/reentrant-contracts\n\n\nhttp://hackingdistributed.com/2016/06/16/scanning-live-ethereum-contracts-for-bugs/\n\n\nhttp://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/\n\n\nhttp://hackingdistributed.com/2016/06/22/smart-contract-escape-hatches/\n\n\nhttp://martin.swende.se/blog/Devcon1-and-contract-security.html\n\n\nhttp://publications.lib.chalmers.se/records/fulltext/234939/234939.pdf\n\n\nhttp://vessenes.com/deconstructing-thedao-attack-a-brief-code-tour\n\n\nhttp://vessenes.com/ethereum-griefing-wallets-send-w-throw-considered-harmful\n\n\nhttp://vessenes.com/more-ethereum-attacks-race-to-empty-is-the-real-deal\n\n\nhttps://blog.blockstack.org/simple-contracts-are-better-contracts-what-we-can-learn-from-the-dao-6293214bad3a\n\n\nhttps://blog.slock.it/deja-vu-dao-smart-contracts-audit-results-d26bc088e32e\n\n\nhttps://blog.vdice.io/wp-content/uploads/2016/11/vsliceaudit_v1.3.pdf\n\n\nhttps://eprint.iacr.org/2016/1007.pdf\n\n\nhttps://github.com/Bunjin/Rouleth/blob/master/Security.md\n\n\nhttps://github.com/LeastAuthority/ethereum-analyses\n\n\nhttps://medium.com/@ConsenSys/assert-guards-towards-automated-code-bounties-safe-smart-contract-coding-on-ethereum-8e74364b795c\n\n\nhttps://medium.com/@coriacetic/in-bits-we-trust-4e464b418f0b\n\n\nhttps://medium.com/@hrishiolickel/why-smart-contracts-fail-undiscovered-bugs-and-what-we-can-do-about-them-119aa2843007\n\n\nhttps://medium.com/@peterborah/we-need-fault-tolerant-smart-contracts-ec1b56596dbc\n\n\nhttps://medium.com/zeppelin-blog/zeppelin-framework-proposal-and-development-roadmap-fdfa9a3a32ab\n\n\nhttps://pdaian.com/blog/chasing-the-dao-attackers-wake\n\n\nhttp://www.comp.nus.edu.sg/~loiluu/papers/oyente.pdf",
            "title": "Smart Contract Security Bibliography"
        },
        {
            "location": "/bibliography/#by-ethereum-core-developers",
            "text": "How to Write Safe Smart Contracts  (Christian Reitwiessner)  Smart Contract Security  (Christian Reitwiessner)  Thinking about Smart Contract Security  (Vitalik Buterin)  Solidity  Solidity Security Considerations",
            "title": "By Ethereum core developers"
        },
        {
            "location": "/bibliography/#by-community",
            "text": "http://forum.ethereum.org/discussion/1317/reentrant-contracts  http://hackingdistributed.com/2016/06/16/scanning-live-ethereum-contracts-for-bugs/  http://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/  http://hackingdistributed.com/2016/06/22/smart-contract-escape-hatches/  http://martin.swende.se/blog/Devcon1-and-contract-security.html  http://publications.lib.chalmers.se/records/fulltext/234939/234939.pdf  http://vessenes.com/deconstructing-thedao-attack-a-brief-code-tour  http://vessenes.com/ethereum-griefing-wallets-send-w-throw-considered-harmful  http://vessenes.com/more-ethereum-attacks-race-to-empty-is-the-real-deal  https://blog.blockstack.org/simple-contracts-are-better-contracts-what-we-can-learn-from-the-dao-6293214bad3a  https://blog.slock.it/deja-vu-dao-smart-contracts-audit-results-d26bc088e32e  https://blog.vdice.io/wp-content/uploads/2016/11/vsliceaudit_v1.3.pdf  https://eprint.iacr.org/2016/1007.pdf  https://github.com/Bunjin/Rouleth/blob/master/Security.md  https://github.com/LeastAuthority/ethereum-analyses  https://medium.com/@ConsenSys/assert-guards-towards-automated-code-bounties-safe-smart-contract-coding-on-ethereum-8e74364b795c  https://medium.com/@coriacetic/in-bits-we-trust-4e464b418f0b  https://medium.com/@hrishiolickel/why-smart-contracts-fail-undiscovered-bugs-and-what-we-can-do-about-them-119aa2843007  https://medium.com/@peterborah/we-need-fault-tolerant-smart-contracts-ec1b56596dbc  https://medium.com/zeppelin-blog/zeppelin-framework-proposal-and-development-roadmap-fdfa9a3a32ab  https://pdaian.com/blog/chasing-the-dao-attackers-wake  http://www.comp.nus.edu.sg/~loiluu/papers/oyente.pdf",
            "title": "By Community"
        },
        {
            "location": "/about/reviewers/",
            "text": "The following people have reviewed this document (date and commit they reviewed in parentheses):\nBill Gleim (07/29/2016 3495fb5)\nBill Gleim (03/15/2017 0244f4e)",
            "title": "Reviewers"
        },
        {
            "location": "/about/license/",
            "text": "Copyright 2016 Smart Contract Best Practices Authors\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "title": "License"
        },
        {
            "location": "/about/contributing/",
            "text": "We welcome all contributions - send a pull request or open an issue. When possible, send different pull requests by section/topic.\n\n\nFeel free to peruse the \nopen issues\n for ideas which need to be expanded on a bit here.\n\n\nLayout and Compilation\n\u00b6\n\n\nWe aren't using the \nold-src\n folder anymore. You should directly edit the README.md instead.\n\n\nAudience\n\u00b6\n\n\nWrite for an intermediate Ethereum developer, they know the basics of Solidity programming and have coded a number of contracts\n\n\nStyle Guidelines\n\u00b6\n\n\nGeneral\n\u00b6\n\n\n\n\nFavor succinctness in writing\n\n\nUse max 3-4 sentences in a section (exceptions can be made when critical)\n\n\nShow, don\u2019t tell (examples speak more than lengthy exposition)\n\n\nInclude a simple, illustrative example rather than complex examples that require substantial, extraneous reading\n\n\nAdd a source link to the original document when available\n\n\nCreate new sections when warranted\n\n\nKeep code lines under 80 characters when possible\n\n\nMark code\n as insecure, bad, good where relevant\n\n\nUse the format of the \nAirbnb Javascript Style guide\n as a starting point\n\n\n\n\nRecommendations Section\n\u00b6\n\n\n\n\nAlways favor a declarative tip starting with a verb for the section title\n\n\nInclude good and bad examples, when possible\n\n\nEnsure each subsection has an anchor tag for future hyperlinking\n\n\n\n\nAttacks Section\n\u00b6\n\n\n\n\nProvide an example - then point to a recommendation for the solution in the relevant section of the doc\n\n\nList first/most visible attack, where possible\n\n\nEnsure each subsection has an anchor tag for future hyperlinking\n\n\nMark vulnerable pieces of code as \n// INSECURE",
            "title": "Contributing"
        },
        {
            "location": "/about/contributing/#layout-and-compilation",
            "text": "We aren't using the  old-src  folder anymore. You should directly edit the README.md instead.",
            "title": "Layout and Compilation"
        },
        {
            "location": "/about/contributing/#audience",
            "text": "Write for an intermediate Ethereum developer, they know the basics of Solidity programming and have coded a number of contracts",
            "title": "Audience"
        },
        {
            "location": "/about/contributing/#style-guidelines",
            "text": "",
            "title": "Style Guidelines"
        },
        {
            "location": "/about/contributing/#general",
            "text": "Favor succinctness in writing  Use max 3-4 sentences in a section (exceptions can be made when critical)  Show, don\u2019t tell (examples speak more than lengthy exposition)  Include a simple, illustrative example rather than complex examples that require substantial, extraneous reading  Add a source link to the original document when available  Create new sections when warranted  Keep code lines under 80 characters when possible  Mark code  as insecure, bad, good where relevant  Use the format of the  Airbnb Javascript Style guide  as a starting point",
            "title": "General"
        },
        {
            "location": "/about/contributing/#recommendations-section",
            "text": "Always favor a declarative tip starting with a verb for the section title  Include good and bad examples, when possible  Ensure each subsection has an anchor tag for future hyperlinking",
            "title": "Recommendations Section"
        },
        {
            "location": "/about/contributing/#attacks-section",
            "text": "Provide an example - then point to a recommendation for the solution in the relevant section of the doc  List first/most visible attack, where possible  Ensure each subsection has an anchor tag for future hyperlinking  Mark vulnerable pieces of code as  // INSECURE",
            "title": "Attacks Section"
        }
    ]
}